
[1,2,3,4,5].each {|x| (puts "oh no its 3"; next) if x ==3
puts 'ok'
}
cpe = 'cpe:2.3:a:microsoft:internet_explorer:6:*:*:*:*:*:*:*'
foo = cpe.split(':').map{|x| x == '*' ? '' : x}
require 'cvss_suite'
vim
cvss_2_hash('AV:N/AC:L/AU:N/C:C/I:C/A:C')
cvss_2_hash('10.0 (AV:N/AC:L/AU:N/C:C/I:C/A:C)')
foo = CvssSuite.new('AV:N/AC:L/AU:N/C:C/I:C/A:C')
foo.base.authentication
foo.base.authentication.select_choice
foo.base.authentication.selected_choice
def logger.error(asdf)
puts asdf
end
class Logger
def error(asf)
puts asf
logger = Logger.new
logger.error('dfdfd')
cvss2_hash('AV:N/AC:L/Au:N/C:C/I:C/A:C')
cvss2_hash('AV:N/AC:L/AU:N/C:C/I:C/A:C')
$logger = logger
@audit = Object.new()
def @audit.audit_id
1234
'asdfdsfdfs'.scan(/fdfdfdf/)
'asdfdsfdfs'.scan(/df/)
'asdfdsfdfs'.scan(/fdfdfdf/)/first
'asdfdsfdfs'.scan(/fdfdfdf/).first
20.0 * 4.1
20.0 * 4.23
20.0 * 4.2
20.0 * 4.15
20.0 * 4.0001
20 * 4.0001
1231231231231231231231212323398888838293812798172391872391827319823719283719283719283719237918273981273123**12
1000**1000
1234**1234
12345**12345
12345**123456
12345**123456789
12345**12345678
12345**1234567
foo = 12345**1234567
foo.class
0xffff
0xffffffff
0xffffff
0xfffff
0x10000
0xf0000
foo = { bar: { chuck: '1111'}}
foo[:bar][:chuck]
foo[:baf][:chuck]
foo.bar[:chuck]
foo.&bar[:chuck]
foo.&bar
foo
foo&.bar
cvss_to_hash = {}
def cvss_to_hash
{}
  def severity
    cvss_to_hash[:baseMetricV2][:severity]
    rescue NoMethodError
      return 'None'
  end
severity
{baseMetricV2: {}}
cvss_to_hash
    cvss_to_hash[:baseMetricV2][:severity] || 'None'
{baseMetricV2:{}}
foo&.[]
foo&.[:chuck]
foo&.[]('foo')
foo&.[]('bar')
foo&.[](:bar)
foo&.[](:bar)&.[](:chuck)
foo&.[](:bar)&.[](:chucksdfsdf)
foo&.[](:baf)&.[](:chucksdfsdf)
foo&.[:bar](:baf)&.[](:chucksdfsdf)
foo&.[:bar]&.[](:chucksdfsdf)
foo&[:bar]&.[](:chucksdfsdf)
foo&[:bar]
foo&.[:bar]
foo&.[](:bar)&.[](:chucksdfsdf) || 'sdfsdf'
foo[:bar][:adfasdf]
foo[:baffr][:adfasdf]
{ foo: { bar: 'hello'}}&.[](:foo)&.[](:bar)
{ foo: { bar: 'hello'}}&.[](:foo)&.[](:barffff)
{ foo: { bar: 'hello'}}&.[](:nothing_here)&.[](:barffff)
{ foo: { bar: 'hello'}}[:nothing_here][:barffff]
foo.each
foo&.each
foo&.eacfdfdf
foo&.eacfdfdf()
foo = CvssSuite.new('AV:N/AC:H/Au:N/C:C/I:C/A:C')
foo.severity
'HIGH'.capitalize
{}&.[](:baseMetricV2)&.[](:severity) 
({}&.[](:baseMetricV2)&.[](:severity)  || 'None')
({}&.[](:baseMetricV2)&.[](:severity)  || 'None').capitilize
({}&.[](:baseMetricV2)&.[](:severity)  || 'None').capitalize
bar = CvssSuite.new('AV:N/AC:L/Au:N/C:P/I:P/A:P')
bar.severity
require 'json'
JSON.parse(file.read('device_types.json'))
JSON.parse('device_types.json')
JSON.parse(File.read('device_types.json'))
foo = JSON.parse(File.read('device_types.json')).map{|x|x[:name]}
foo = JSON.parse(File.read('device_types.json')).map{|x|x["name"]}
puts foo
require 'nokogiri'
noko = Nokogiri::XML(File.read('cve_2017_12285_cisco_prime_network_analysis_module_graph_sfile_parameter_directory_traversal.xml'))
@cwes  = noko.xpath('//references/reference[@type="cwe"]').map { |m| attributes['value'].value }
noko.xpath('//references/reference[@type="cwe"]')
noko.xpath('//references/reference[@type="cwe"]').map {|m|}
noko.xpath('//references/reference[@type="cwe"]').map {|m| m.attributes}
noko.xpath('//references/reference[@type="cwe"]').map {|m| m.attributes['value']}
noko.xpath('//references/reference[@type="cwe"]').map {|m| m.attributes['value'].value}
noko.xpath('//references/reference[@type="cwe"]').map {|m| m.value}
noko.xpath('//references/reference[@type="cwe"]').map {|m| m['value']}
  def cves
    # Should be individual, but just in case ...
    cves = noko.xpath('//references/reference[@type="cve"]').map { |m| m.attributes['value'].value }
    @cves = [cves].flatten.map {|m| m.split(/\s*,\s*/) }.flatten.sort.uniq
cves
@noko = noko
def noko
@noko
noko.xpath('//references/reference[@type="cve"]').map { |m| m.attributes['value'].value }
 noko.xpath('//references/reference[@type="cwe"]').map { |m| m['value'] }
 noko.xpath('//references/reference[@type="cwe"]').map(&:'value')
 noko.xpath('//references/reference[@type="cwe"]').map(&:'values')
 noko.xpath('//references/reference[@type="cwe"]').map(&:values)
 noko.xpath('//references/reference[@type="cwe"]').map(&:value)
 noko.xpath('//references/reference[@type="cwe"]').map(&:[]value)
 noko.xpath('//references/reference[@type="cwe"]').map(&:['value'])
 noko.xpath('//references/reference[@type="cwe"]').map(&:[]('value'))
 noko.xpath('//references/reference[@type="cwe"]').map(&.[]('value'))
puts “doc#{[‘1’,’2’].sample}”
puts "doc#{[‘1’,’2’].sample}”
puts "doc#{[‘1’,’2’].sample}
puts "doc#{[‘1’,’2’].sample}"
puts "doc#{['1','2'].sample}"
require 'cvss_suite
foo = CvssSuite.new('CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N')
foo.base_score
foo = [12,3,3,3,3]
foo.collect { |bar| bar + 1}
foo.map { |bar| bar + 1}
  PRODUCT_LINE_SEARCH = ['IPS Signature',
                         'WAF Signature',
                         'Antivirus Signature',
                         'Endpoint Signature',
                         'Antispyware Signature',
                         'DNS Signature',
                         'Malware Analysis Signature']
PRODUCT_LINE_SEARCH.is_a?(Set)
PRODUCT_LINE_SEARCH.is_a?(Array)
PRODUCT_LINE_SEARCH = Set.new(['IPS Signature',
)
PRODUCT_LINE_SEARCH.include?('Malware Analysis Signature')
PRODUCT_LINE_SEARCH.include?('Malware Analysis Signaturedfdfd')
  PRODUCT_LINE_SEARCH = Set.new([
                         'IPS Signature',
                         'Malware Analysis Signature'])
PRODUCT_LINE_SEARCH.include?('adsf')
Set.first
foo = Set.new(1,2,3,4)
foo = Set.new([1,2,3,4])
foo[0]
foo.first
foo.second
bar = {:foo, :chuck, :reza}
bar = {foo: 123, chuck: 4444, reza: :4343}
bar = {foo: 123, chuck: 4444, reza: :asd}
bar.first
bar.second
bar[0]
'adsasd'.concat('adfasdf')
test = '1234'
test << 'hello' << '3434'
desc
'adfasdf' << nil
'adfasdf' << nil.to_s
'asdfadsf'.to_s
def chuck
puts 'hello'
return
puts 'googdbye'
chuck
{chuck: 123, amelia: 'adfas'}
{chuck: 123, amelia: 'adfas'}.delete(:amelia)
foo = {chuck: 123, amelia: 'adfas'}
foo.delete(:amelia0
foo.delete(:amelia)
foo.slice(:amelia)
foo.slice(:amelia, :chuck)
webcam_noko = Nokogiri::XML(File.read('daily.html'))
webcam_noko.xpath('//section')
webcam_noko.xpath('//section/div/div')
webcam_noko.xpath('//section/div/div/img')
webcam_noko.xpath('//img')
webcam_noko.xpath('//img[@sizes="100vw"]')
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]')
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]').count
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]').first
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]').first.to_s
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]/img').first.to_s
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]/img').first['src']
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]/img').first['src'].parnet
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]/img').first['src'].parent
webcam_noko.xpath('//div[@class="panel-foreground panel-video"]/img').parent
require 'net/http'
picture = Net::HTTP.get('cannonmt.com', '/imager/www_cannonmt_com/local/cannoncam/cannoncam-1578327755_390f809132a0b3532c9838bd142cba50.jpg')
picture = Net::HTTP.get('www.cannonmt.com', '/imager/www_cannonmt_com/local/cannoncam/cannoncam-1578327755_390f809132a0b3532c9838bd142cba50.jpg')
picture = Net::HTTPS.get('www.cannonmt.com', '/imager/www_cannonmt_com/local/cannoncam/cannoncam-1578327755_390f809132a0b3532c9838bd142cba50.jpg')
picture = Net::HTTPS.get('www.cannonmt.com', '/imager/www_cannonmt_com/local/cannoncam/cannoncam-1578327755_390f809132a0b3532c9838bd142cba50.jpg', use_ssl: true)
picture = Net::HTTP.get('www.cannonmt.com', '/imager/www_cannonmt_com/local/cannoncam/cannoncam-1578327755_390f809132a0b3532c9838bd142cba50.jpg', use_ssl: true)
picture_uri = URI('https://www.cannonmt.com//imager/www_cannonmt_com/local/cannoncam/cannoncam-1578327755_390f809132a0b3532c9838bd142cba50.jpg')
Net:HTTP.get(picture_uri)
picture_uri
uri = URI('http://example.com/index.html?count=10')
Net::HTTP.get(uri)
Net::HTTP.get(picture_uri)
picture = Net::HTTP.get(picture_uri)
picture.length
puts  "GET /ws/stats HTTP/1.1\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: zh-CN,zh;q=0.9\r\nCache-Control: no-cache\r\nConnection: Upgrade\r\nHost: 92.222.66.50\r\nOrigin: https://92.222.66.50\r\nPragma: no-cache\r\nSec-Websocket-Extensions: permessage-deflate; client_max_window_bits\r\nSec-Websocket-Key: kflydZvBnEpYnswR+3ybRQ==\r\nSec-Websocket-Version: 13\r\nUpgrade: websocket\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko"
puts "GET /info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffreeurlredirect.com%2Fposicionamientowebmadrid103939%3EMadrid%3C%2Fa%3E HTTP/1.1\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.5\r\nConnection: Upgrade\r\nDnt: 1\r\nHost: 181.215.120.39\r\nOrigin: https://181.215.120.39\r\nProxy-Connection: Keep-Alive\r\nReferer: https://181.215.120.39/\r\nUpgrade: websocket\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4882.400 QQBrowser/9.7.13076.400\r\nX-Forwarded-For: 88.18.181.37\r\nX-Real-Ip: 88.18.181.37"
require 'net/https'
webcam_noko = Nokogiri::XML(Net::HTTP.get(URI('https://www.cannonmt.com/mountain-report')))
webcam_noko.xpath('//div[@id="conditions"]')
webcam_noko.xpath('//div[@id="conditions"]').first.text
webcam_noko.xpath('//div[@id="conditions"]').first.innerhtml
webcam_noko.xpath('//div[@id="conditions"]').first.inner_html
puts webcam_noko.xpath('//div[@id="conditions"]').first.text
puts webcam_noko.xpath('//div[@id="conditions"]').first.each
puts webcam_noko.xpath('//div[@id="conditions"]').first
puts webcam_noko.xpath('//div[@id="conditions"]').first.children
puts webcam_noko.xpath('//div[@id="conditions"]').first.children.children
 webcam_noko.xpath('//div[@id="conditions"]').first.children.children.each do | x | 
puts x
puts 'chuck'
 webcam_noko.xpath('//div[@id="conditions"]').first.children.each do | x | 
require 'html2text'
# general
uri = URI('https://hooks.slack.com/services/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')
# random
# https://hooks.slack.com/services/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
mountain_report_noko = Nokogiri::XML(Net::HTTP.get(URI('https://www.cannonmt.com/mountain-report')))
conditions = mountain_report_noko.xpath('//div[@id="conditions"]').first.inner_html
mountain_report.xpath('//div[@id="conditions"]').first 
mountain_report_noko.xpath('//div[@id="conditions"]').first 
mountain_report_noko.xpath('//div[@id="conditions"]').first .text
mountain_report_noko.xpath('//div[@id="conditions"]').first.innerhtml
mountain_report_noko.xpath('//div[@id="conditions"]').first.inner_html
text = Html2Text.convert(mountain_report_noko)
text
puts text
stuff = mountain_report_noko.xpath('//div[@id="conditions"]').first.inner_html
text = Html2Text.convert(stuff)
stuff = mountain_report_noko.xpath('//div[@id="conditions"]/p')
stuff = mountain_report_noko.xpath('//div[@id="conditions"]/p').first
stuff = mountain_report_noko.xpath('//div[@id="conditions"]/p').first.text
'Low 14'
'Low 14'.gsub(/Low/)
'Low 14'.gsub(/Low/).first
'Low 14'.gsub(/Low/).second
'Low 14'.sub('Low')
'Low 14'.sub('Low','')
'Low 14'.sub('Low ','')
'Low 14'.scan(/Low/)
"chuck\nasdf"
"chuck \n asdf"
puts "chuck\nads"
puts "chuck\nads".strip("\n")
puts "chuck\nads".tr("\n",'')
puts "chuck\nads".tr(" ",'')
puts "chuck\nads".tr(" ",'').tr("\n",' ')
FileUtils::mkdir
FileUtils::mkdir('/tmp')
Dir.mkdir('/tmp')
mkdir_p
FileUtils.mkdir_p('/tmp')
FileUtils.mkdir_p('/tmp/foobar/chuck')
['chuck'].flatten.map{|path| File.path(path)}
[['chuck']].flatten.map{|path| File.path(path)}
FileUtils.mkdir_p(['/tmp/foobar/chuck', '/tmp/baroof/fred'])
File.expand_path('~/tmp')
8.224.round(2)
foo = true
case foo
when true
puts 'first one'
puts 'second one'
when false
puts 'not true'
{
[ 'beansec is cancelled', 'no beansec is totally uncool', 'this one time at beansec', 'beansec dont you mean unfunsec?', 'beansec is to security what sad drinking is to partying']
[ 'beansec is cancelled', 'no beansec is totally uncool', 'this one time at beansec', 'beansec dont you mean unfunsec?', 'beansec is to security what sad drinking is to partying', 'yes'].sample(1)
foo = `which echo`
foo = `which echo`.strip
foo = `which echoadsfdsaf`.strip
!foo
if !foo
puts 'adfasdf'
foo.empty?
ext = 'pcapng'
case ext
when 'pcapng'
puts 'asdfasd'
when ['pcapng', 'pcap'].include?
puts 'asdfasdf'
when 'pcapng' || 'pcap'
puts 'adsasdf'
ext ='chuck'
when ['pcap', 'pcapng']
puts 'chuck
'
['pcap', 'pcapng'] === 'pcap'
when 'pcap','pcapng'
nil > 0
nil.empty
nil.empty?
[nil, 0].include?(nil)
[nil, 0].include?(0)
foo = File.read('/Users/Chuck/Perforce/ati-cloud-unstable/tools/recommendations/var/data/metadata/keywords.xml')
bar = Nokogiri::XML(foo)
bar.xpath('/keyword_definition/keywords/keyword').map {|kw| kw['name']}
bar.xpath('/keywords/keyword').map do |kw|
    kw['name']
audit_id = 'first, last = audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i)
audit_id = 'abc2fd2131a-d5f7-11e8-9f8b-f2801f1b9fd1abc11111111'
audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i)
audit_id.split[8]
audit_id.split
audit_id.split('a')
audit_id.split('-')
audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i).first.length
audit_id[0,14]
audit_id[14]
audit_id[0,15]
audit_id[0,16]
good_audit = '2fd2131a-d5f7-11e8-9f8b-f2801f1b9fd1'
good_audit[0,14]
good_audit[0,14,10]
a,b = [ good_audit[0,14], good_audit[20,]]
"-9f8b-f2801f1b9fd1".length
good_audit[-18]
good_audit[-18,...]
good_audit[-18,..]
good_audit[-18,]
good_audit[-18,-1]
good_audit[-18,-0]
good_audit
"2fd2131a-d5f7-11e8-9f8b".length
good_audit.length
good_audit[24
]
good_audit[23]
good_audit[23,36]
good_audit[23,37]
good_audit[23,35]
good_audit[19,36]
good_audit[18,36]
audit_id
audit_id = good_audit
 first, last = [audit_id[0,14], audit_id[18,36]]
first_orig, last_orig = audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i)
first == first_orig
last == last_orig
 first, last = [audit_id[0,13], audit_id[18,36]]
 first, last = [audit_id[0,13], audit_id[19,36]]
class Chuck
class String
def snake_case
puts 'i hate you'
def initialize
puts 'chuck'.snake_case
foo = Chuck.new()
module StringExtensions
self.gsub(/::/, '/').
gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
gsub(/([a-z\d])([A-Z])/,'\1_\2').
gsub(/[-\x20]/,'_').
downcase
    module StringExtensions
        def snake_case
            self.gsub(/::/, '/').
            gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
            gsub(/([a-z\d])([A-Z])/,'\1_\2').
            gsub(/[-\x20]/,'_').
            downcase
        end
    end
    String.include StringExtensions
    def initialize()
        puts 'hello'
        puts 'HELO THERE'.snake_case
foo = Chuck.new
'HEL DF SFS'.snake_case
def foo(bar)
case bar
when nil?
else
puts 'foooo'
foo(nil)
nil?
nil
when nil
puts 'yes'
puts 'no'
foo(nil?)
foo('fdsf')
''.empty?
@foo.empty?
@foo=[][
@foo=[]
@foo=''
ext = 'jar'
  # checking for android malware
  if ['zip', 'jar'].include?(ext)
    cmd = "zipinfo #{file} |grep -E 'MANIFEST.MF|AndroidManifest|classes.dex'"
    @magic = []
    lines = cmd.split('\n')
    lines.each do |line|
      data = line.split(' ')
      @magic << 1 if ['AndroidManifest.xml', 'classes.dex', 'META-INF/MANIFEST.MF'].include?(data[-1])
    # APK?
    ext = 'apk' unless @magic.empty?
file = 'wubbalubbadubdub'
@magic
ext
file = 'AndroidManifest.xml'
file = '\nAndroidManifest.xml\n'
file
foo = [1,2,4,5,100]
foo.reverse
foo.delete {|x| x % 2 == 0}
foo.select {|x| x % 2 == 0}
foo.select! {|x| x % 2 == 0}
bar = [2,4,100]
foo == bar
foo === bar
foo.push(1)
foo.count
def foobar
return unless false
foobar
puts 'here'
true ? puts 'hello' : puts 'no' if false
true ? (puts 'hello') : (puts 'no') if false
true ? (puts 'hello') : (puts 'no') if true
foo = { chuck: 1, bar: 2, foo: 3}
foo.each(&:puts)
foo.each(&:+1)
foo.each(&:+)
foo.each(&:to_s)
foo.each { |_k, v| v + 1}
foo.map { |_k, v| v + 1}
foo = [1,2,3]
!foo.select {|x| x%2}
!foo.select {|x| x%2}.empty?
targets = {}
targets.store(chuck: 1)
targets.store({chuck: 1})
targets.store(:chuck, 1)
targets
targets[:foo].merge(bar: 123)
targets[:foo].merge!(bar: 123)
targets.merge!(foo: { bar: 123})
targets.merge!(foo: { chuck: 123})
foo = {foo: { bar: 123} }
targets.merge(foo)
targets.merge(foo) { |key, important, default| important }
targets.merge(foo) { |key, important, default| important.merge(default) }
bar
bar = { chuck: 123}
targets.merge(bar) { |key, important, default| important.merge(default) }
bar = { chuck: { bar: 123}}
targets.merge!(foo) { |key, important, default| important.merge(default) }
target
[ { vendor: 'microsoft', 'windows' => 'windows'}, {vendor: 'microsoft', 'office' => 'office'}]
@vuln_products = [ { vendor: 'microsoft', 'windows' => 'windows'}, {vendor: 'microsoft', 'office' => 'office'}]
@vuln_products = [ { vendor: 'microsoft', name: 'windows'}, {vendor: 'microsoft', name: 'office'}]
@vuln_products.reduce{|new_hash, element| new_hash.merge(element)}
@vuln_products.reduce{|new_hash, element| new_hash.merge({element.vendor => { name: element.name} })}
@vuln_products.reduce{|new_hash, element| new_hash.merge({element[:vendor] => { name: element[:name]} })}
foo = ['bar
foo ['bar
foo = [
foo = ['bar', 'baz', 'boof']
foo.join(', ')
foo[0, -1].join(', ')
foo[0, -1]
foo[0, 1]
foo[0, 2]
foo[-1]
foo[0..-1]
foo[0..-2]
foo[0...-1]
foo[0...-1].join(', ')
foo[0...-1].join(', ') + ", and #{foo.last}"
foo = ['bar', 'baz']
foo[0...-1].join(', ') + " and #{foo.last}"
foo = ['bar', 'baz', 'baroof', 'oof']
string = foo[0...-1].join(', ') + " and #{foo.last}"
"This audit simulates #{string} traffic that might not be bad by itself but can be problematic for the $wife_unit."
string = foo[0...-1].join(', ') + ", #{foo.last}"
string = foo.count > 1 ? foo.first : foo[0...-1].join(', ') + " and #{foo.last}"
string = foo.count == 1 ? foo.first : foo[0...-1].join(', ') + " and #{foo.last}"
foo = ['bar']
foo = [{name: 'bar'}, {name: 'baz'}, {name: 'baroof'}, {name: 'oof'}]
foo.pluck(:name)
foo.map{|x| x.name}
foo.map{|x| x[:name]}
foo.map{|x| x[:name]}.join(', ')
foo.map(&:name).join(', ')
foo.map(&[:name]).join(', ')
['chuck', 'xavier', 'foobar'].include?(['chuck'])
['chuck', 'xavier', 'foobar'].include?('chuck')
['chuck', 'xavier', 'foobar'].include?('chuck','xavier')
['chuck', 'xavier', 'foobar'] - ['xavier', 'chuck']
['chuck', 'xavier', 'foobar'] - ['xavier']
['chuck', 'xavier', 'foobar'] & ['xavier']
['chuck', 'xavier', 'foobar'] & ['xavdfsdfsdf']
(['chuck', 'xavier', 'foobar'] & ['xavdfsdfsdf']).empty?
unless true
puts 'atrt'
unless false
puts 'adsfadsf'
if !false
puts 'adf'
puts 'adfsfd'
Nokogiri::XMLFragment('<chuck>')
Nokogiri::XML::Fragment('<chuck>')
Nokogiri::XML.Fragment('<chuck>')
Nokogiri::HTML.fragment("<chuck/>")
Nokogiri::HTML.fragment("<chuck/>").to_s
Dir.glob('*/*.xml')
Dir.glob('*/*.xml') do
Dir.glob('*/*.xml') do |x|
foo = Nokogiri::XML(File.read(x))
  def strike_service_ports(strike_file)
    strike = BPSXMLParser.smart_load_xml(strike_file,
                                         [SECURITY_DIR, Dir.pwd])
    xml = Nokogiri::XML.parse(strike)
    ports = xml.xpath('/attack/trans[@type="open"]').map do |f|
      [f['dport'].tr('"()$', ''), f['proto']]
    end.uniq
    # return array of port values and port in format 'tcp_80'
    ports.map do |var|
      # Use it if it's numeric
      if var[0] =~ /^[0-9]+$/
        "#{var[1]}_#{var[0]}"
      # Else go find where it was defined
      else
        # Search for variable defines in strike XML.
        # <dblock store=variable_name>variable_value</dblock>
        # <dblock name=variable_name>variable_value</dblock>
        # variable_name=variable_value (ruby synatax)
        correlated_ports = strike.scan(/#{var[0]}\s*=\s*([0-9]+)|<dblock[^>]+(?:name|store)=[\x22\x27]#{var[0]}[^>]+>([0-9]+)</)
        if correlated_ports.first.nil?
          # search for the first random port
          var[1] + '_' + xml.xpath('/attack/conf/dblock[@type="rand_select" and @store="port"]/opt/dblock/text()').first
        else
          var[1] + '_' + correlated_ports.first.compact.first
      end
foo = Nokogiri::XML(File.read('cve_2018_18500_firefox_write_after_free.xml'))
foo.xpath('/attack/conf/dblock[@type="rand_select" and @store="port"]/opt/text()').first
foo.xpath('/attack/conf/dblock[@type="rand_select" and @store="port"]/opt/text()').first.to_s
Nokogiri::XML(File.open('all_assessments_assessment.xml'), &:xinclude)
puts 'hello\r\nthere!'
puts "hello\r\nthere!"
require 'SecureRandom'
require 'SecureRandom'; SecureRandom.uuid
[1,2,4,5].map{|x|
x+1}
[1,2,3,4]
[1,2,3,4].map { |x| x + 1}
new_arry = [1,2,3,4].map { |x| x + 1}
new_array
new_arry
new_arry.map! {|x| x*2}.
new_arry.select {|x| x % 4 == 0 }
new_arry..map {|z| z*3 }.select {|x| x % 4 == 0 }
new_arry.map {|z| z*3 }.select {|x| x % 4 == 0 }
1..3
1....3
1...3
10.times { puts 'chuck'}
Set.new([1,2,3])
chuck = Set.new
[['1'],['2'],['3a','3b']].inject(&:product).map(&:flatten)
1.product
[1,2,3].product
chuck = Set.new([1,2,3])
garett = Set.new([2,3,4,5])
chuck.join(garett)
chuck.inject(garett)
garett.each{|x|chuck.inject(x)}
garett.each{|x|chuck.push(x)}
garett.each{|x|chuck.add(x)}
chuck = 'somethig something ##category## adfasdf'
chuck.sub(/##category##/, "fooo")
chuck.sub!(/##category##/, "fooo")
if ''
require('nokogiri')
foo = Nokogiri::XML(File.read('/Users/Chuck//Perforce/ati-unstable/tests/bpslive/assessments/data_exfiltration_assessment_pii_webdav.xml'))
foo.xpath('name')
foo.xpath('//audits/name')
foo.xpath('//audit/name')
foo.xpath('//audit/name').first
foo.xpath('//audit/name').first.to_s
foo.xpath('//audit/name').first.text
foo.xpath('//audit/names').first.text
foo.xpath('//audit/namse').first
foo.include('WebDAV')
foo.include?('WebDAV')
foo.xpath('//audit/name').first.tetx
foo.xpath('//audit/name').first.text.include?('csv')
foo.xpath('//audit/name').first.text.include?('csfdfdfv')
@foo = {foo: 1}
@foo[:foo]
@foo[:foob]
@foo[:foob][:bar]
@foo[:foo][:bar]
@foo = {foo: 1, bar: { foo: 1}}
@foo[:bar]
@foo[:bar][:foo]
@foo[:bar][:foo3]
@foo[:bar][:foob]
@foo[:baroo][:foob]
@foo&[:baroo][:foob]
@foo.bar[:foob]
@foo&.bar[:foob]
@foo&.bar&.foob
@foo.&bar.&foob
@foo
@foo&.[]('chuck')
@foo&.[]('bar')
@foo&.[](:bar)
@foo&.[](:bar)&.[](:foo)
@foo&.[](:bar)&.[](:foob)
nil.dig(:adf)
nil.&[](:adf)
ni&.[](:adf)
nil&.[](:adf)
'947958f7-1e0b-4010-1234-6e81540ed21f'[19,36]
'947958f7-1e0b-4010-1234-6e81540ed21f'[0,13]
foo = ['Endpoint is a device or node that is connected to a network and accepts communications back and forth across the network', 'Examples of endpoint include desktop, laptop, smartphone, IoT devices', 'Execution of attacker-controlled commands, usually with elevated privileges', 'Group of compromised systems networked to communicate with a Command-and-Control server', 'Specific recommendation tied to Lazarus stage 4']
u'adfasdf'
bar = [''Endpoint is a device or node that is connected to a network and accepts comm'nications back and forth across the network', ''Examples of endpoint incl'de desktop, laptop, smartphone, IoT devices', ''Gro'p of compromised systems networked to comm'nicate with a Command-and-Control server', ''Specific recommendation tied to Lazar's stage 4 Exec'tion of attacker-controlled commands, 's'ally with elevated privileges']
bar = ['Endpoint is a device or node that is connected to a network and accepts communications back and forth across the network', 'Examples of endpoint include desktop, laptop, smartphone, IoT devices', 'Group of compromised systems networked to communicate with a Command-and-Control server', 'Specific recommendation tied to Lazarus stage 4 Execution of attacker-controlled commands, usually with elevated privileges']
foo && bar
foo - bar
bar.count
bar-foo
foo-bar
require 'redcarpet'
require 'redcarpet
markdown = Redcarpet::Markdown.new()
markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML)
text = '# Assessment Details
SQL Injection attacks target data-driven web applications, by inserting SQL
statements into HTTP request data (such as form, HTTP header or URL parameter
values). These attacks take advantage of unsanitized data to subvert the query
executed on the database by inserting SQL statement into HTTP request.
This assessment contains a collection of SQL Injection payloads
coming from multiple public sources and private resources. 
This assessment contains 2 stages:
* Stage1: Simulates a user exploring a website and identifying forms and field values into which SQL Injection payloads can be inserted.
* Stage2: Simulates a user attempting a wide variety of SQL Injection attacks against previously identified forms and field values.
* If an Audit results in Pass, this indicates one of the tested security controls prevented the attack
* If an Audit results in Failure, this indicates that all tested security controls failed to prevent the attack
markdown.render(text)
File.write('/tmp/foo.html',markdown.render(text))
text = '# BLABLABLA
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Something something the secret to life is 42:
* Stage you do the thing
* you do the other thing but for some reason you are a paragraph now.
* There was a deliberate empty space above.
* I am feeling a little weird. bugs
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed adsasdfadfadsfadsf
text = `pbpaste`
caller
caller.to_json
"#{caller.to_json}"
"#{caller.to_json} adfasdf"
{foo: 123123}.to_json
caller[0..10]
require 'cvsssuite'
require 'cvss-suite;
require 'cvss-suite'
cvss3 = CvssSuite.new('AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N')
cvss3.base.attack_vector.selected_choice[:weight]
cvss3.base.attack_vector
cvss3
cvss3.score
cvss3.exploit
cvss
cvss3.base
cvss3.base.attack_vector.score
c
cvss3 = CvssSuite.new('CVSS:3.0AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N')
cvss3 = CvssSuite.new('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N')
cvss3.base.attack_complexity.score
cvss3.base.privileges_required.score
cvss3.base.user_interaction.score
cvss3.base.attack_complexity.selected_choice[:weight]
cvss3.base.privileges_required.selected_choice[:weight]
cvss3.base.user_interaction.selected_choice[:weight]
cvss3.vectorString
cvss3.vector
cvss3.basescore
cvss3.base_score
cvss3.base.exploitability
cvss3.base.exploitability.score
cvss3.vectir
require 'yaml'
data = JSON::parse(`curl localhost:3001/api/v1/audits`)
data.to_yaml
source('dothething.rb')
File.write('foo.txt',data.to_yaml)
YAML::load(File.read('foo.txt'))
old_data = YAML::load(File.read('foo.txt'))
old_data == data
foo = 1234
time = Time.now
time = Time.now + 5
time +5
time
time.strftime("%a, %d %b %Y %H:%M:%S %Z")
(time + 5).strftime("%a, %d %b %Y %H:%M:%S %Z")
puts ("\x09")
puts ("asdfasdf\x09asdfa")
foo <<HERE
aasdfasdf
adsfasdf
HERE
foo=<<HERE
adfasdf
email=<<HERE
      Received: from mx.$(dist)$(tld2) ([45.142.214.33]) by\x20
      $(name1).$(name2)$(tld) for $(To);\x0d\x0a\x09\x20$(date2)\x0d\x0a
      Received: from smtp16.mail.ru (smtp16.mail.ru [94.100.176.153]\x0d\x0a\x09 by mx.boduim.com with ESMTP id 1j88tY-0000E3-OZ\x0d\x0a
      \x09 for $(To); $(date1)\x0d\x0a
      Date: $(date1)\x0d\x0a
      From: Covid Amji <abuse@etaktika.ru>\x0d\x0a
      Subject: This is a secure message from Cigna. #1171\x0d\x0a
      Content-Type: multipart/alternatve; boundary="_$(num1)_$(num2)"\x0d\x0a
      To: $(To)\x0d\x0a\x0d\x0a
      --_$(num1)_$(num2)\x0d\x0a
      Content-Transfer-Encoding: quoted-printable\x0d\x0a
      ContentType: text/plain; charset="windows-1251"\x0d\x0a\x0d\x0a
       . check this id #1171\x0d\x0a\x0d\x0a
       --_$(num1)_$(num2)\x0d\x0a
       Content-Transfer-Encoding: quoted-printable\x0d\x0a
       Content-Type: text/html; charset="windows-1251"
       \x0d\x0a\x0d\x0a
       <html><head>
       <style>div.zm_-2176180758171517720_parse_-5787935824583836068 a { outline: none; color: rgb(0, 0, 204); text-decoration: underline }
       div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646active a:hover { text-decoration: none !important }
       div.zm_-2176180758171517720_parse_-5787935824583836068 a[x-apple-data-detectors] { color: inherit !important; text-decoration: none !important }
       div.zm_-2176180758171517720_parse_-5787935824583836068 table td { }
       div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass a, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass span, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass b, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass br, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass p, div.zm_-21       div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass, div.zm_-2176180758171517720_parse_-5787935824583een and (max-width: 500px) {div.zm_-2176180758171517720_parse_-5787935824583836068 table[class="flexible"] { width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 table[class="table-center"] { float: none !important; margin: 0 auto !important } div.zm_-2176180758171517720_parse_-5787935824583836068 *[class="hide"] { display: none !important; width: 0 !important; height: 0 !important; padding: 0 !important; font-size: 0 !important; line-height: 0 !important } div.zm_-2176180758171517720_parse_-5787935824583836068 span[class="db"] { display: block !important } div.zm_-2176180758171517720_parse_-5787935824583836068 td[class="img-flex"] img { width: 100% !important; height: auto !important } div.zm_-2176180758171517720_parse_-5787935824583836068 td[class="aligncenter"] { text-align: center !important } div.zm_-2176180758171517720_parse_-5787935824583836068 tr[class="table-holder"] { display: table !important; width: 100% !important } div.zm_-2176180758171517720_pars
       e_-5787935824583836068 th[class="tcap"] { display: table-caption !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="thead"] { display: table-header-group !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="trow"] { display: table-row !important; width: 100% !important }       e_-5787935824583836068 th[class="tcap"] { display: table-caption !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="thead"] { display: table-header-group !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="trow"] { display: table-row !important; width: 100% !important }       e_-5787935824583836068 th[class="tcap"] { display: table-caption !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="thead"] { display: table-header-group !important; width: 100% !important } div.zm_-21761807581 0pt 0pt 5px;">
       <table style="border-spacing: 8px;" cellpadding="0" cellspacing="0" width="100%">
       <tbody>
       <tr style="border-bottom: 3px none rgb(243, 243, 243);">
       <td class="x_1961006646block" style="padding: 40px 35px;" bgcolor="#ffffff">
       <table cellpadding="0" cellspacing="0" width="100%">
       <tr>
       <td style="padding: 0pt 0pt 24px;" align="center"> <br>
       </td>
       </tr>
       <td class="x_1961006646title" style="padding: 0pt 0pt 2px; font-family: Helvetica,Arial,Roboto,Noto,sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 24px; line-height: 28px; font-size-adjust: none; font-stretch: normal; color: rgb(255, 102, 0); letter-spacing: -0.3px;" align="center">Insurance plan up-date message</td>
       <td class="x_1961006646pb30" style="font-family: Helvetica,Arial,Roboto,Noto,sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 18px; li       <td clax;       <td class="x_1961006646pb30" style="font-family: Helvetica,Arial,Roboto,Noto,san <br>
       </td       </td       </td       </td       </td       </td        s       </td       </td       </td       </td       </td       </td        s       t-       </td       </td       </td       </td       </td   e-height: 22px; font-size-adjust: none; font-stretch: normal; color: rgb(72, 72, 72);" align       </tdhank you for
            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            i: 0pt 0pt 45px;          en            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in     mily: Helvetica,Arial,sans-serif; font-style: normal; font-variant: normal; font-weight: bold; font-size: 21px; line-height: 24px; font-size-adjust: none; font-stretch: normal; color: rgb(255, 255, 255); id="background-image_url_3" align="center" bgcolor="#013cbb" width="310"> <a class="x_1961006646button-1" target="_blank" style="padding: 16px 15px; text-decoration: none; color: rgb(255, 255, 255); display: block;" href="http://new.915yzt.cn/wp-includes/rmdrinkwater.php?t=TW9uLCAxNiBNYXIgMjAyMCAyMDoxNzoxNSArMDMwMA==">Here
       is your latest Invoice #1171</a> </td>
       </tbody>
       </table>
       <td style="padding: 0pt 0pt 20px;">
       <td style="border-bottom: 1px solid rgb(201, 201, 201); padding: 0pt 0pt 45px;" align="center"><br>
       <td class="x_1961006646pb30" style="font-family: Helvetica,Arial,Roboto,Noto,sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 18px; line-height: 22px; font-size-adjust: none; font-stretch: normal; color: rgb(72, 72, 72);" align="center">Please do not pause to get hold of us. We
       are happy to guide you.<br>
       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You  e note: This
       e mail along with its
       material are
       private and meant
       exclusively for the addressee. Please remember to alert
       the message sende       the message sende       the message sende       th or       the medelete it</td>       the message sende       the message sende       the message sende       th or       the medelete i      </td>
                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style=served</p>
       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco      <       <p style="text-deco om" style="text-decoration: none;" target="_blank">HELP</a></p>
       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http         <a s      </body></html>
       --_$(num1)_$(num2)--\x0d\x0a
      \x0d\x0a.\x0d\x0a
email
eval(email)
eval(puts email)
puts email
foo = File.read('hancitor_covid_subject_phishing_email.xml')
foo.xpath('//trans/dblock[@type="ascii"]')
foo = Nokogiri::XML(File.read('hancitor_covid_subject_phishing_email.xml'))
foo.xpath('//trans[@/dblock[@type="ascii"]').first
foo.xpath('//trans/dblock[@type="ascii"]').second
foo.xpath('//trans/dblock[@type="ascii"]').last
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]')
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').count
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]')[1]
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]')[2]
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').strip
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.strip
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.strip("\r\n")
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.tr("\r\n")
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.tr("\r\n","")
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.tr("\r\n","").tr(
YAML.unescape
require 'syck/encoding'
def unescape(string)
  dup = string.dup
  escaped_chars = ['n', 't', 'r', 'f', 'v', '0', 'a']
  escaped_subs = {
    "n" => "\n",
    "t" => "\t",
    "r" => "\r",
    "f" => "\f",
    "v" => "\v",
    "0" => "\0",
    "a" => "\a"
  }
  pos = 0
  while pos < dup.length
    if dup[pos] == '\\' and escaped_chars.include? dup[pos + 1]
      dup[pos..(pos + 1)] = escaped_subs[dup[pos + 1]]
    pos += 1
  return dup
mytext= foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.tr("\r\n","")
unescape(mytext)
puts mytext
if nil > -1
puts 'asdf'
if nil < -1
puts 'adsf'
puts 'aasdf' if nil < -1
puts 'aasdf' if nil &.< -1
value = nil
puts 'aasdf' if value &.< -1
value = -1
value = -3
@repositories = %w[checkpoint fortiguard paloalto xforce snort microsoft hpe cisco firepower redhat suse]
@repositories
@repositories & ["fortiguard"]
@repositories | ["fortiguard"]
@repositories ^ ["fortiguard"]
@repositories - ['fortiguard']
'asdfasdf,asdfasdf,asdf'.split(',')
'asdfasdf'.split(',')
File.read('asdfasdf')
File.exist?('/tmp/foo')
File.exists?('/tmp/foo')
foo = []
bar = [1,23,4,5,]
foo += bar
foo[1]
foo = File.read('foo.json')
bar = JSON.parse(foo)
bar.merge({"to" => "hello@example.com"})
{foo: 1, bar: 2} & {:foo}
{foo: 1, bar: 2}.slice[:foo]
{foo: 1, bar: 2}
{foo: 1, bar: 2}.slice{:foo}
{foo: 1, bar: 2}.slice(:foo)
{foo: 1, bar: 2}.slice(:foo, :chuck)
{chuck: 'chuck'}.merge({foo: 1, bar: 2}.slice(:foo, :chuck)(
{chuck: 'chuck'}.merge({foo: 1, bar: 2}.slice(:foo, :chuck))
{chuck: 'chuck'}.merge({foo: 1, bar: 2, "chuck" => "fred"}.slice(:foo, :chuck))
{chuck: 'chuck'}.merge({foo: 1, bar: 2, "chuck" => "fred"}.slice(:foo, "chuck"))
{'chuck' => "nope"}.merge({foo: 1, bar: 2, "chuck" => "fred"}.slice(:foo, "chuck"))
{chuck: 1234}.to_json
{'chuck': 1234}
{'chuck' => 1234}
{'chuck' => 1234}.as_json
pairs = [[1,2]]
paris += [[3,4],[5,6]]
pairs += [[3,4],[5,6]]
paris
pairs
pairs += [1,2,3].map { |x| [x,x+100] }
File.join('attachments', "something else that's weird")
File.join('attachments', "something else that's w\x0aeird")
nil.slice
nil[]
nil[1]
nil&[1]
[1,2,3,4]&[1]
nil&[1].slice
nil&[1].&slice
nil&[1]&.slice
nil.&[1]
%i[http dns]
%I[http dns]
%I[http 
dns]
%i[http 
%i[http, dns] 
%I[http, dns] 
puts @what
attr_accessor: what
attr_accessor :what
hello = Chuck.new()
hello.what = 1
hello.foobar
hello.what = 100
@config
@config&.[:asf]
@config&.has_key?(:foo)
@config = {}
@config = {foo: 123}
{}.merge(nil)
@adsfasfd&.has_key?(:adsf)
source 'assessment_list_things.rb'
irb
foo = Thingy.new
foo.get_assessment
bar = foo.get_assessment
bar['assessment_stages']
bar['assessment_stages'].each do |x|
x['audit_lists'].first['audit_list_members'] do |y|
puts y['member_id']
require 'optparse'
{chuck: true}.merge({chuck: false})
[].empty?
File.join('./config')
File.basename('./config')
File.basename('./config.json')
foo = {}
foo['asdfasdf'] = 123
require json
json_email_config = JSON.parse(File.read('config.json'))
json_email_config = JSON.parse(File.read('config.json'))['headers']['Subject'] = 'asdfasdf'
source 'parse.rb'
ms_json
ms_json['affected_products']
ms_json['affectedProducts']
foo['adsfasdf']['adfasdf'] = 123
foo['adsfasdf'] = 123
foo.default={}
foo['adsfasdfaaaasdfasdf']['adfasdf'] = 123
foo.default_proc={}
foo.default_proc=Hash.new()
foo = P{
foo.default_proc = proc do |hash, key|
hash[key] = {}
foo['asdf']['cuck']=1
foo.default_proc = proc { |h, k| h[k] = {} }
require_relative 'id_generator
require_relative 'id_generator'
IDGenerator.measures
