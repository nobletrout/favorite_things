class << self
puts methods.include?(foo)
end
end
class Time
class << self
puts methods.include?(:foo)
end
end
class Time
self.methods.include?(:foo)
end
class Time
self.methods.include?(:foob)
end
class Time
class << self
self.methods.include?(:foo)
end
end
class Time
class << self
methods
end
end
class Time
class << self
methods
end
end
bar = class Time
class << self
methods
end
end
bar.include?(:now)
bar.include?(:foo)
bar.include?(:trust)
:null
nil
null
:null.nil?
:null
foo: :null
{foo: :null}
{:len => :null}
{len: :null}
{:len => :null}
{:len => :null}['len']
vim
require 'interactive_editor'
vim
require 'seeing_is_believing'
vim
vim
require 'seeing_is_believing'
require 'interactive_editor'
vim
vim
require 'seeing_is_believing'
require 'interactive_editor'
vim
source 'id_generator.rb'
foo = IDGenerator.new()
source 'id_generator.rb'
foo = IDGenerator.new()
foo = IDGenerator.new()
source 'id_generator.rb'
foo = IDGenerator.new()
source 'id_generator.rb'
foo = IDGenerator.new()
IDGenerator.measures
source 'id_generator.rb'
IDGenerator.measures
source 'id_generator.rb'
IDGenerator.measures
foo = IDgenerator.new()
foo = IDGenerator.new()
foo.measures
source 'id_generator.rb'
File.read('/tmp/donteist')
File.read('/tmp/donteist') if File.exist?('/tmp/dontexi')
foo = Nokogiri::XML(File.read('./strikes/exploits/iis/unicode_execution_007.xml'))
require 'nokogiri'
foo = Nokogiri::XML(File.read('./strikes/exploits/iis/unicode_execution_007.xml'))
foo
foo['attack']
foo[:attack]
foo['document']
foo.root
foo.root['attack']
foo.xpath('/attack')
foo.xpath('/attack/trans/dblock/uri')
foo.xpath('/attack/trans/dblock/uri').content
foo.xpath('/attack/trans/dblock/uri').text
vim
require 'seeing_is_believing'
vim
vim
vim
