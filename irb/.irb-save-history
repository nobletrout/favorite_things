require 'net/https'
require 'json'
# general
uri = URI('https://hooks.slack.com/services/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')
# random
# https://hooks.slack.com/services/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
mountain_report_noko = Nokogiri::XML(Net::HTTP.get(URI('https://www.cannonmt.com/mountain-report')))
conditions = mountain_report_noko.xpath('//div[@id="conditions"]').first.inner_html
mountain_report.xpath('//div[@id="conditions"]').first 
mountain_report_noko.xpath('//div[@id="conditions"]').first 
mountain_report_noko.xpath('//div[@id="conditions"]').first .text
mountain_report_noko.xpath('//div[@id="conditions"]').first.innerhtml
mountain_report_noko.xpath('//div[@id="conditions"]').first.inner_html
text = Html2Text.convert(mountain_report_noko)
text
puts text
stuff = mountain_report_noko.xpath('//div[@id="conditions"]').first.inner_html
text = Html2Text.convert(stuff)
puts text
text = Html2Text.convert(stuff)
stuff = mountain_report_noko.xpath('//div[@id="conditions"]/p')
stuff = mountain_report_noko.xpath('//div[@id="conditions"]/p').first
stuff = mountain_report_noko.xpath('//div[@id="conditions"]/p').first.text
'Low 14'
'Low 14'.gsub(/Low/)
'Low 14'.gsub(/Low/).first
'Low 14'.gsub(/Low/).second
'Low 14'.sub('Low')
'Low 14'.sub('Low','')
'Low 14'.sub('Low ','')
'Low 14'.scan(/Low/)
"chuck\nasdf"
"chuck \n asdf"
puts "chuck\nads"
puts "chuck\nads".strip("\n")
puts "chuck\nads".tr("\n",'')
puts "chuck\nads".tr(" ",'')
puts "chuck\nads".tr(" ",'').tr("\n",' ')
FileUtils::mkdir
FileUtils::mkdir('/tmp')
Dir.mkdir('/tmp')
mkdir_p
FileUtils.mkdir_p('/tmp')
FileUtils.mkdir_p('/tmp/foobar/chuck')
FileUtils.mkdir_p('/tmp/foobar/chuck')
['chuck'].flatten.map{|path| File.path(path)}
[['chuck']].flatten.map{|path| File.path(path)}
FileUtils.mkdir_p(['/tmp/foobar/chuck', '/tmp/baroof/fred'])
File.expand_path('~/tmp')
8.224.round(2)
foo = true
case foo
when true
puts 'first one'
when true
puts 'second one'
when false
puts 'not true'
end
{
}
[ 'beansec is cancelled', 'no beansec is totally uncool', 'this one time at beansec', 'beansec dont you mean unfunsec?', 'beansec is to security what sad drinking is to partying']
[ 'beansec is cancelled', 'no beansec is totally uncool', 'this one time at beansec', 'beansec dont you mean unfunsec?', 'beansec is to security what sad drinking is to partying', 'yes'].sample(1)
[ 'beansec is cancelled', 'no beansec is totally uncool', 'this one time at beansec', 'beansec dont you mean unfunsec?', 'beansec is to security what sad drinking is to partying', 'yes'].sample(1)
[ 'beansec is cancelled', 'no beansec is totally uncool', 'this one time at beansec', 'beansec dont you mean unfunsec?', 'beansec is to security what sad drinking is to partying', 'yes'].sample(1)
[ 'beansec is cancelled', 'no beansec is totally uncool', 'this one time at beansec', 'beansec dont you mean unfunsec?', 'beansec is to security what sad drinking is to partying', 'yes'].sample(1)
[ 'beansec is cancelled', 'no beansec is totally uncool', 'this one time at beansec', 'beansec dont you mean unfunsec?', 'beansec is to security what sad drinking is to partying', 'yes'].sample(1)
foo = `which echo`
foo = `which echo`.strip
foo = `which echoadsfdsaf`.strip
!foo
foo = `which echo`.strip
!foo
if !foo
puts 'adfasdf'
end
foo
foo = `which echoadsfdsaf`.strip
foo.empty?
ext = 'pcapng'
case ext
when 'pcapng'
puts 'asdfasd'
end
case ext
when ['pcapng', 'pcap'].include?
puts 'asdfasdf'
end
case ext
when 'pcapng' || 'pcap'
puts 'adsasdf'
end
ext ='chuck'
case ext
when 'pcapng' || 'pcap'
puts 'adsasdf'
end
ext = 'pcapng'
case ext
when ['pcap', 'pcapng']
puts 'chuck
'
end
['pcap', 'pcapng'] === 'pcap'
case ext
when 'pcap','pcapng'
puts 'chuck'
end
nil > 0
nil.empty
nil.empty?
[nil, 0].include?(nil)
[nil, 0].include?(0)
foo = File.read('/Users/Chuck/Perforce/ati-cloud-unstable/tools/recommendations/var/data/metadata/keywords.xml')
require 'nokogiri'
bar = Nokogiri::XML(foo)
bar.xpath('/keyword_definition/keywords/keyword').map {|kw| kw['name']}
foo = File.read('/Users/Chuck/Perforce/ati-cloud-unstable/tools/recommendations/var/data/metadata/keywords.xml')
require 'nokogiri'
bar = Nokogiri::XML(foo)
bar.xpath('/keywords/keyword').map do |kw|
    kw['name']
  end
audit_id = 'first, last = audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i)
audit_id = 'abc2fd2131a-d5f7-11e8-9f8b-f2801f1b9fd1abc11111111'
audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i)
audit_id.split[8]
audit_id.split
audit_id.split('a')
audit_id.split('-')
audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i)
audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i).first.length
audit_id[0,14]
audit_id[14]
audit_id[0,15]
audit_id[0,16]
good_audit = '2fd2131a-d5f7-11e8-9f8b-f2801f1b9fd1'
good_audit[0,14]
good_audit[0,14,10]
a,b = [ good_audit[0,14], good_audit[20,]]
"-9f8b-f2801f1b9fd1".length
good_audit[-18]
good_audit[-18,...]
good_audit[-18,..]
good_audit[-18,]
good_audit[-18,-1]
good_audit[-18,-0]
good_audit
"2fd2131a-d5f7-11e8-9f8b".length
good_audit.length
good_audit[24
]
good_audit[23]
good_audit[23,36]
good_audit[23,37]
good_audit[23,35]
good_audit[23,36]
good_audit[19,36]
good_audit[18,36]
audit_id
audit_id = good_audit
 first, last = [audit_id[0,14], audit_id[18,36]]
first_orig, last_orig = audit_id.scan(/[a-f0-9]{8}-[a-f0-9]{4}-|-[a-f0-9]{4}-[a-f0-9]{12}/i)
first == first_orig
last == last_orig
 first, last = [audit_id[0,14], audit_id[18,36]]
 first, last = [audit_id[0,13], audit_id[18,36]]
 first, last = [audit_id[0,13], audit_id[19,36]]
class Chuck
class String
def snake_case
puts 'i hate you'
end
end
def initialize
puts 'chuck'.snake_case
end
end
foo = Chuck.new()
module StringExtensions
def snake_case
self.gsub(/::/, '/').
gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
gsub(/([a-z\d])([A-Z])/,'\1_\2').
gsub(/[-\x20]/,'_').
downcase
end
end
class Chuck
    module StringExtensions
        def snake_case
            self.gsub(/::/, '/').
            gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
            gsub(/([a-z\d])([A-Z])/,'\1_\2').
            gsub(/[-\x20]/,'_').
            downcase
        end
    end
    String.include StringExtensions
    def initialize()
        puts 'hello'
        puts 'HELO THERE'.snake_case
    end
end
foo = Chuck.new
'HEL DF SFS'.snake_case
def foo(bar)
case bar
when nil?
puts 'chuck'
else
puts 'foooo'
end
end
foo(nil)
nil?
nil
def foo(bar)
case bar
when nil
puts 'yes'
else
puts 'no'
end
end
foo(nil)
foo(nil?)
foo('fdsf')
''.empty?
@foo.empty?
@foo=[][
]
@foo=[]
@foo.empty?
@foo=''
@foo.empty?
ext = 'jar'
  # checking for android malware
  if ['zip', 'jar'].include?(ext)
    cmd = "zipinfo #{file} |grep -E 'MANIFEST.MF|AndroidManifest|classes.dex'"
    @magic = []
    lines = cmd.split('\n')
    lines.each do |line|
      data = line.split(' ')
      @magic << 1 if ['AndroidManifest.xml', 'classes.dex', 'META-INF/MANIFEST.MF'].include?(data[-1])
    end
    # APK?
    ext = 'apk' unless @magic.empty?
  end
file = 'wubbalubbadubdub'
  # checking for android malware
  if ['zip', 'jar'].include?(ext)
    cmd = "zipinfo #{file} |grep -E 'MANIFEST.MF|AndroidManifest|classes.dex'"
    @magic = []
    lines = cmd.split('\n')
    lines.each do |line|
      data = line.split(' ')
      @magic << 1 if ['AndroidManifest.xml', 'classes.dex', 'META-INF/MANIFEST.MF'].include?(data[-1])
    end
    # APK?
    ext = 'apk' unless @magic.empty?
  end
@magic
ext
file = 'AndroidManifest.xml'
  # checking for android malware
  if ['zip', 'jar'].include?(ext)
    cmd = "zipinfo #{file} |grep -E 'MANIFEST.MF|AndroidManifest|classes.dex'"
    @magic = []
    lines = cmd.split('\n')
    lines.each do |line|
      data = line.split(' ')
      @magic << 1 if ['AndroidManifest.xml', 'classes.dex', 'META-INF/MANIFEST.MF'].include?(data[-1])
    end
    # APK?
    ext = 'apk' unless @magic.empty?
  end
ext
file = '\nAndroidManifest.xml\n'
  # checking for android malware
  if ['zip', 'jar'].include?(ext)
    cmd = "zipinfo #{file} |grep -E 'MANIFEST.MF|AndroidManifest|classes.dex'"
    @magic = []
    lines = cmd.split('\n')
    lines.each do |line|
      data = line.split(' ')
      @magic << 1 if ['AndroidManifest.xml', 'classes.dex', 'META-INF/MANIFEST.MF'].include?(data[-1])
    end
    # APK?
    ext = 'apk' unless @magic.empty?
  end
ext
file
foo = [1,2,4,5,100]
foo.reverse
foo
foo.delete {|x| x % 2 == 0}
foo.select {|x| x % 2 == 0}
foo.select! {|x| x % 2 == 0}
foo
bar = [2,4,100]
foo == bar
foo === bar
foo == bar
foo.push(1)
foo == bar
foo.count
def foobar
return unless false
end
foobar
def foobar
return unless false
puts 'here'
end
foobar
true ? puts 'hello' : puts 'no' if false
true ? (puts 'hello') : (puts 'no') if false
true ? (puts 'hello') : (puts 'no') if true
foo = { chuck: 1, bar: 2, foo: 3}
foo.each(&:puts)
foo.each(&:+1)
foo.each(&:+)
foo.each(&:to_s)
foo.each { |_k, v| v + 1}
foo.map { |_k, v| v + 1}
!foo
foo
foo = [1,2,3]
!foo.select {|x| x%2}
!foo.select {|x| x%2}.empty?
targets = {}
targets.store(chuck: 1)
targets.store({chuck: 1})
targets.store(:chuck, 1)
targets
targets = {}
targets[:foo].merge(bar: 123)
targets[:foo].merge!(bar: 123)
targets.merge!(foo: { bar: 123})
targets.merge!(foo: { chuck: 123})
targets
foo = {foo: { bar: 123} }
foo
targets.merge(foo)
targets
targets.merge(foo) { |key, important, default| important }
targets.merge(foo) { |key, important, default| important.merge(default) }
bar
bar = { chuck: 123}
targets.merge(bar) { |key, important, default| important.merge(default) }
bar = { chuck: { bar: 123}}
targets.merge(bar) { |key, important, default| important.merge(default) }
targets.merge!(foo) { |key, important, default| important.merge(default) }
target
targets
targets.merge(bar) { |key, important, default| important.merge(default) }
[ { vendor: 'microsoft', 'windows' => 'windows'}, {vendor: 'microsoft', 'office' => 'office'}]
@vuln_products = [ { vendor: 'microsoft', 'windows' => 'windows'}, {vendor: 'microsoft', 'office' => 'office'}]

@vuln_products = [ { vendor: 'microsoft', name: 'windows'}, {vendor: 'microsoft', name: 'office'}]
@vuln_products.reduce{|new_hash, element| new_hash.merge(element)}
@vuln_products.reduce{|new_hash, element| new_hash.merge({element.vendor => { name: element.name} })}
@vuln_products.reduce{|new_hash, element| new_hash.merge({element[:vendor] => { name: element[:name]} })}
foo = ['bar
foo ['bar
foo = [
foo = ['bar', 'baz', 'boof']
foo.join(', ')
foo[0, -1].join(', ')
foo[0, -1]
foo[0, 1]
foo[0, 2]
foo[-1]

foo[0..-1]
foo[0..-2]
foo[0...-1]
foo[0...-1].join(', ')
foo[0...-1].join(', ') + ", and #{foo.last}"
foo = ['bar', 'baz']
foo[0...-1].join(', ') + ", and #{foo.last}"
foo[0...-1].join(', ') + " and #{foo.last}"
foo = ['bar', 'baz', 'baroof', 'oof']
foo[0...-1].join(', ') + " and #{foo.last}"
string = foo[0...-1].join(', ') + " and #{foo.last}"
"This audit simulates #{string} traffic that might not be bad by itself but can be problematic for the $wife_unit."
string = foo[0...-1].join(', ') + ", #{foo.last}"
"This audit simulates #{string} traffic that might not be bad by itself but can be problematic for the $wife_unit."
string = foo.count > 1 ? foo.first : foo[0...-1].join(', ') + " and #{foo.last}"
string = foo.count == 1 ? foo.first : foo[0...-1].join(', ') + " and #{foo.last}"
foo = ['bar']
string = foo.count == 1 ? foo.first : foo[0...-1].join(', ') + " and #{foo.last}"
foo
foo = ['bar', 'baz', 'baroof', 'oof']
foo = [{name: 'bar'}, {name: 'baz'}, {name: 'baroof'}, {name: 'oof'}]
foo.pluck(:name)
foo.map{|x| x.name}
foo.map{|x| x[:name]}
foo.map{|x| x[:name]}.join(', ')
foo.map(&:name).join(', ')
foo.map(&[:name]).join(', ')
['chuck', 'xavier', 'foobar'].include?(['chuck'])
['chuck', 'xavier', 'foobar'].include?('chuck')
['chuck', 'xavier', 'foobar'].include?('chuck','xavier')
['chuck', 'xavier', 'foobar'] - ['xavier', 'chuck']
['chuck', 'xavier', 'foobar'] - ['xavier']
['chuck', 'xavier', 'foobar'] & ['xavier']
['chuck', 'xavier', 'foobar'] & ['xavdfsdfsdf']
(['chuck', 'xavier', 'foobar'] & ['xavdfsdfsdf']).empty?
unless true
puts 'atrt'
end
unless false
puts 'adsfadsf'
end
if !false
puts 'adf'
end
unless false
puts 'adfsfd'
end
require 'nokogiri'
Nokogiri::XMLFragment('<chuck>')
Nokogiri::XML::Fragment('<chuck>')
Nokogiri::XML.Fragment('<chuck>')
Nokogiri::HTML.fragment("<chuck/>")
Nokogiri::HTML.fragment("<chuck/>").to_s
Dir.glob('*/*.xml')
Dir.glob('*/*.xml') do
require 'nokogiri'
Dir.glob('*/*.xml') do |x|
foo = Nokogiri::XML(File.read(x))
  def strike_service_ports(strike_file)
    strike = BPSXMLParser.smart_load_xml(strike_file,
                                         [SECURITY_DIR, Dir.pwd])
    xml = Nokogiri::XML.parse(strike)
    ports = xml.xpath('/attack/trans[@type="open"]').map do |f|
      [f['dport'].tr('"()$', ''), f['proto']]
    end.uniq
    # return array of port values and port in format 'tcp_80'
    ports.map do |var|
      # Use it if it's numeric
      if var[0] =~ /^[0-9]+$/
        "#{var[1]}_#{var[0]}"
      # Else go find where it was defined
      else
        # Search for variable defines in strike XML.
        # <dblock store=variable_name>variable_value</dblock>
        # <dblock name=variable_name>variable_value</dblock>
        # variable_name=variable_value (ruby synatax)
        correlated_ports = strike.scan(/#{var[0]}\s*=\s*([0-9]+)|<dblock[^>]+(?:name|store)=[\x22\x27]#{var[0]}[^>]+>([0-9]+)</)
        if correlated_ports.first.nil?
          # search for the first random port
          var[1] + '_' + xml.xpath('/attack/conf/dblock[@type="rand_select" and @store="port"]/opt/dblock/text()').first
        else
          var[1] + '_' + correlated_ports.first.compact.first
        end
      end
    end
  end
vim
require 'nokogiri'
foo = Nokogiri::XML(File.read('cve_2018_18500_firefox_write_after_free.xml'))
foo.xpath('/attack/conf/dblock[@type="rand_select" and @store="port"]/opt/text()').first
foo.xpath('/attack/conf/dblock[@type="rand_select" and @store="port"]/opt/text()').first.to_s
require 'nokogiri'
Nokogiri::XML(File.open('all_assessments_assessment.xml'), &:xinclude)
Nokogiri::XML(File.open('all_assessments_assessment.xml'), &:xinclude)
Nokogiri::XML(File.open('all_assessments_assessment.xml'), &:xinclude)
Nokogiri::XML(File.open('all_assessments_assessment.xml'), &:xinclude)
puts 'hello\r\nthere!'
puts "hello\r\nthere!"
require 'SecureRandom'
require 'SecureRandom'; SecureRandom.uuid
[1,2,4,5].map{|x|
x+1}
[1,2,3,4]
[1,2,3,4].map { |x| x + 1}
new_arry = [1,2,3,4].map { |x| x + 1}
new_array
new_arry
new_arry.map! {|x| x*2}.
new_arry
new_arry.select {|x| x % 4 == 0 }
new_arry..map {|z| z*3 }.select {|x| x % 4 == 0 }
new_arry.map {|z| z*3 }.select {|x| x % 4 == 0 }
1..3
1....3
1..3
1...3
10.times { puts 'chuck'}
Set.new([1,2,3])
chuck = Set.new
[['1'],['2'],['3a','3b']].inject(&:product).map(&:flatten)
1.product
[1,2,3].product
chuck = Set.new([1,2,3])
garett = Set.new([2,3,4,5])
chuck.join(garett)
chuck.inject(garett)
garett.each{|x|chuck.inject(x)}
garett.each{|x|chuck.push(x)}
garett.each{|x|chuck.add(x)}
chuck
chuck = 'somethig something ##category## adfasdf'
chuck.sub(/##category##/, "fooo")
chuck
chuck.sub!(/##category##/, "fooo")
chuck
if ''
puts 'adfasdf'
end
require('nokogiri')
foo = Nokogiri::XML(File.read('/Users/Chuck//Perforce/ati-unstable/tests/bpslive/assessments/data_exfiltration_assessment_pii_webdav.xml'))
foo.xpath('name')
foo.xpath('//audits/name')
foo.xpath('//audit/name')
foo.xpath('//audit/name').first
foo.xpath('//audit/name').first.to_s
foo.xpath('//audit/name').first.text
foo.xpath('//audit/names').first.text
foo.xpath('//audit/name').first.text
foo.xpath('//audit/name').first
foo.xpath('//audit/namse').first
foo.include('WebDAV')
foo.include?('WebDAV')
foo
foo.xpath('//audit/namse').first
foo.xpath('//audit/name').first
foo.xpath('//audit/name').first.tetx
foo.xpath('//audit/name').first.text
foo.xpath('//audit/name').first.text.include?('csv')
foo.xpath('//audit/name').first.text.include?('csfdfdfv')
@foo = {foo: 1}
@foo[:foo]
@foo[:foob]
@foo[:foob][:bar]
@foo[:foo][:bar]
@foo = {foo: 1, bar: { foo: 1}}
@foo[:bar]
@foo[:bar][:foo]
@foo[:bar][:foo3]
@foo[:bar][:foob]
@foo[:baroo][:foob]
@foo&[:baroo][:foob]
@foo.bar[:foob]
@foo&.bar[:foob]
@foo&.bar&.foob
@foo.&bar.&foob
@foo
@foo&.[]('chuck')
@foo&.[]('bar')
@foo&.[](:bar)
@foo&.[](:bar)&.[](:foo)
@foo&.[](:bar)&.[](:foob)
nil.dig(:adf)
nil.dig(:adf)
nil.&[](:adf)
ni&.[](:adf)
nil&.[](:adf)
'947958f7-1e0b-4010-1234-6e81540ed21f'[19,36]
'947958f7-1e0b-4010-1234-6e81540ed21f'[0,13]
foo = ['Endpoint is a device or node that is connected to a network and accepts communications back and forth across the network', 'Examples of endpoint include desktop, laptop, smartphone, IoT devices', 'Execution of attacker-controlled commands, usually with elevated privileges', 'Group of compromised systems networked to communicate with a Command-and-Control server', 'Specific recommendation tied to Lazarus stage 4']
u'adfasdf'
bar = [''Endpoint is a device or node that is connected to a network and accepts comm'nications back and forth across the network', ''Examples of endpoint incl'de desktop, laptop, smartphone, IoT devices', ''Gro'p of compromised systems networked to comm'nicate with a Command-and-Control server', ''Specific recommendation tied to Lazar's stage 4 Exec'tion of attacker-controlled commands, 's'ally with elevated privileges']
bar = ['Endpoint is a device or node that is connected to a network and accepts communications back and forth across the network', 'Examples of endpoint include desktop, laptop, smartphone, IoT devices', 'Group of compromised systems networked to communicate with a Command-and-Control server', 'Specific recommendation tied to Lazarus stage 4 Execution of attacker-controlled commands, usually with elevated privileges']
foo
foo && bar
foo - bar
foo.count
bar.count
bar-foo
foo-bar
foo.count
require 'redcarpet'
require 'redcarpet
require 'redcarpet'
markdown = Redcarpet::Markdown.new()
markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML)
text = '# Assessment Details
SQL Injection attacks target data-driven web applications, by inserting SQL
statements into HTTP request data (such as form, HTTP header or URL parameter
values). These attacks take advantage of unsanitized data to subvert the query
executed on the database by inserting SQL statement into HTTP request.
This assessment contains a collection of SQL Injection payloads
coming from multiple public sources and private resources. 
This assessment contains 2 stages:
* Stage1: Simulates a user exploring a website and identifying forms and field values into which SQL Injection payloads can be inserted.
* Stage2: Simulates a user attempting a wide variety of SQL Injection attacks against previously identified forms and field values.
* If an Audit results in Pass, this indicates one of the tested security controls prevented the attack
* If an Audit results in Failure, this indicates that all tested security controls failed to prevent the attack
'
markdown.render(text)
File.write('/tmp/foo.html',markdown.render(text))
text = '# BLABLABLA
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Something something the secret to life is 42:
* Stage you do the thing
* you do the other thing but for some reason you are a paragraph now.
* There was a deliberate empty space above.
* I am feeling a little weird. bugs
'
File.write('/tmp/foo.html',markdown.render(text))
text = '# BLABLABLA
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed adsasdfadfadsfadsf
Something something the secret to life is 42:
* Stage you do the thing
* you do the other thing but for some reason you are a paragraph now.
* There was a deliberate empty space above.
* I am feeling a little weird. bugs
'
File.write('/tmp/foo.html',markdown.render(text))
text = `pbpaste`
File.write('/tmp/foo.html',markdown.render(text))
caller
caller.to_json
require 'json'
caller.to_json
"#{caller.to_json}"
"#{caller.to_json} adfasdf"
{foo: 123123}.to_json
caller[0..10]
require 'cvsssuite'
require 'cvss-suite;
require 'cvss-suite'
require 'cvss_suite'
cvss3 = CvssSuite.new('AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N')
cvss3.base.attack_vector.selected_choice[:weight]
cvss3.base.attack_vector
cvss3
cvss3.score
cvss3.exploit
cvss
cvss3
cvss3.base
cvss3.base.attack_vector
cvss3.base.attack_vector.score
c
cvss3 = CvssSuite.new('CVSS:3.0AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N')
cvss3 = CvssSuite.new('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N')
cvss3.base.attack_vector
cvss3.base.attack_vector.selected_choice[:weight]
cvss3.base.attack_vector.score
cvss3.base.attack_complexity.score
cvss3.base.privileges_required.score
cvss3.base.user_interaction.score
cvss3.base.attack_complexity.selected_choice[:weight]
cvss3.base.privileges_required.selected_choice[:weight]
cvss3.base.user_interaction.selected_choice[:weight]
cvss3.vectorString
cvss3.vector
cvss3.score
cvss3.basescore
cvss3.base_score
cvss3.base.exploitability
cvss3.base.exploitability.score
cvss3.vectir
cvss3.vector
require 'json'
require 'yaml'
require 'json'
data = JSON::parse(`curl localhost:3001/api/v1/audits`)
data.to_yaml
data.to_yaml
source('dothething.rb')
data.to_yaml
File.write('foo.txt',data.to_yaml)
YAML::load(File.read('foo.txt'))
old_data = YAML::load(File.read('foo.txt'))
old_data == data
foo = 1234
foo
time = Time.now
time = Time.now + 5
time = Time.now + 5
time = Time.now + 5
time +5
time
time.strftime("%a, %d %b %Y %H:%M:%S %Z")
(time + 5).strftime("%a, %d %b %Y %H:%M:%S %Z")
puts ("\x09")
puts ("asdfasdf\x09asdfa")
foo <<HERE
aasdfasdf
adsfasdf
HERE
foo=<<HERE
adfasdf
adsfasdf
HERE
email=<<HERE
      Received: from mx.$(dist)$(tld2) ([45.142.214.33]) by\x20
      $(name1).$(name2)$(tld) for $(To);\x0d\x0a\x09\x20$(date2)\x0d\x0a
      Received: from smtp16.mail.ru (smtp16.mail.ru [94.100.176.153]\x0d\x0a\x09 by mx.boduim.com with ESMTP id 1j88tY-0000E3-OZ\x0d\x0a
      \x09 for $(To); $(date1)\x0d\x0a
      Date: $(date1)\x0d\x0a
      From: Covid Amji <abuse@etaktika.ru>\x0d\x0a
      Subject: This is a secure message from Cigna. #1171\x0d\x0a
      Content-Type: multipart/alternatve; boundary="_$(num1)_$(num2)"\x0d\x0a
      To: $(To)\x0d\x0a\x0d\x0a
      --_$(num1)_$(num2)\x0d\x0a
      Content-Transfer-Encoding: quoted-printable\x0d\x0a
      ContentType: text/plain; charset="windows-1251"\x0d\x0a\x0d\x0a
       . check this id #1171\x0d\x0a\x0d\x0a
       --_$(num1)_$(num2)\x0d\x0a
       Content-Transfer-Encoding: quoted-printable\x0d\x0a
       Content-Type: text/html; charset="windows-1251"
       \x0d\x0a\x0d\x0a
       <html><head>
       <style>div.zm_-2176180758171517720_parse_-5787935824583836068 a { outline: none; color: rgb(0, 0, 204); text-decoration: underline }
       div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646active a:hover { text-decoration: none !important }
       div.zm_-2176180758171517720_parse_-5787935824583836068 a[x-apple-data-detectors] { color: inherit !important; text-decoration: none !important }
       div.zm_-2176180758171517720_parse_-5787935824583836068 table td { }
       div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass a, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass span, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass b, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass br, div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass p, div.zm_-21       div.zm_-2176180758171517720_parse_-5787935824583836068 .x_1961006646ExternalClass, div.zm_-2176180758171517720_parse_-5787935824583een and (max-width: 500px) {div.zm_-2176180758171517720_parse_-5787935824583836068 table[class="flexible"] { width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 table[class="table-center"] { float: none !important; margin: 0 auto !important } div.zm_-2176180758171517720_parse_-5787935824583836068 *[class="hide"] { display: none !important; width: 0 !important; height: 0 !important; padding: 0 !important; font-size: 0 !important; line-height: 0 !important } div.zm_-2176180758171517720_parse_-5787935824583836068 span[class="db"] { display: block !important } div.zm_-2176180758171517720_parse_-5787935824583836068 td[class="img-flex"] img { width: 100% !important; height: auto !important } div.zm_-2176180758171517720_parse_-5787935824583836068 td[class="aligncenter"] { text-align: center !important } div.zm_-2176180758171517720_parse_-5787935824583836068 tr[class="table-holder"] { display: table !important; width: 100% !important } div.zm_-2176180758171517720_pars
       e_-5787935824583836068 th[class="tcap"] { display: table-caption !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="thead"] { display: table-header-group !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="trow"] { display: table-row !important; width: 100% !important }       e_-5787935824583836068 th[class="tcap"] { display: table-caption !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="thead"] { display: table-header-group !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="trow"] { display: table-row !important; width: 100% !important }       e_-5787935824583836068 th[class="tcap"] { display: table-caption !important; width: 100% !important } div.zm_-2176180758171517720_parse_-5787935824583836068 th[class="thead"] { display: table-header-group !important; width: 100% !important } div.zm_-21761807581 0pt 0pt 5px;">
       <table style="border-spacing: 8px;" cellpadding="0" cellspacing="0" width="100%">
       <tbody>
       <tr style="border-bottom: 3px none rgb(243, 243, 243);">
       <td class="x_1961006646block" style="padding: 40px 35px;" bgcolor="#ffffff">
       <table cellpadding="0" cellspacing="0" width="100%">
       <tbody>
       <tr>
       <td style="padding: 0pt 0pt 24px;" align="center"> <br>
       </td>
       </tr>
       <tr>
       <td class="x_1961006646title" style="padding: 0pt 0pt 2px; font-family: Helvetica,Arial,Roboto,Noto,sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 24px; line-height: 28px; font-size-adjust: none; font-stretch: normal; color: rgb(255, 102, 0); letter-spacing: -0.3px;" align="center">Insurance plan up-date message</td>
       </tr>
       <tr>
       <td class="x_1961006646pb30" style="font-family: Helvetica,Arial,Roboto,Noto,sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 18px; li       <td clax;       <td class="x_1961006646pb30" style="font-family: Helvetica,Arial,Roboto,Noto,san <br>
       </td       </td       </td       </td       </td       </td        s       </td       </td       </td       </td       </td       </td        s       t-       </td       </td       </td       </td       </td   e-height: 22px; font-size-adjust: none; font-stretch: normal; color: rgb(72, 72, 72);" align       </tdhank you for
            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            i: 0pt 0pt 45px;          en            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in            in     mily: Helvetica,Arial,sans-serif; font-style: normal; font-variant: normal; font-weight: bold; font-size: 21px; line-height: 24px; font-size-adjust: none; font-stretch: normal; color: rgb(255, 255, 255); id="background-image_url_3" align="center" bgcolor="#013cbb" width="310"> <a class="x_1961006646button-1" target="_blank" style="padding: 16px 15px; text-decoration: none; color: rgb(255, 255, 255); display: block;" href="http://new.915yzt.cn/wp-includes/rmdrinkwater.php?t=TW9uLCAxNiBNYXIgMjAyMCAyMDoxNzoxNSArMDMwMA==">Here
       is your latest Invoice #1171</a> </td>
       </tr>
       </tbody>
       </table>
       </td>
       </tr>
       <tr>
       <td style="padding: 0pt 0pt 20px;">
       <table cellpadding="0" cellspacing="0" width="100%">
       <tbody>
       <tr>
       <td style="border-bottom: 1px solid rgb(201, 201, 201); padding: 0pt 0pt 45px;" align="center"><br>
       </td>
       </tr>
       </tbody>
       </table>
       </td>
       </tr>
       <tr>
       <td class="x_1961006646pb30" style="font-family: Helvetica,Arial,Roboto,Noto,sans-serif; font-style: normal; font-variant: normal; font-weight: normal; font-size: 18px; line-height: 22px; font-size-adjust: none; font-stretch: normal; color: rgb(72, 72, 72);" align="center">Please do not pause to get hold of us. We
       are happy to guide you.<br>
       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You       You  e note: This
       e mail along with its
       material are
       private and meant
       exclusively for the addressee. Please remember to alert
       the message sende       the message sende       the message sende       th or       the medelete it</td>       the message sende       the message sende       the message sende       th or       the medelete i      </td>
       </tr>
                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style="font-           al,Helvetica,sans-serif; fo                   <td style=served</p>
       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco       <p style="text-deco      <       <p style="text-deco om" style="text-decoration: none;" target="_blank">HELP</a></p>
       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http://d       <a style="font-size:3px" href="http         <a s      </body></html>
       \x0d\x0a\x0d\x0a
       --_$(num1)_$(num2)--\x0d\x0a
      \x0d\x0a.\x0d\x0a
HERE
HERE
foo
email
eval(email)
eval(puts email)
puts email
email
puts email
email
require 'nokogiri'
foo = File.read('hancitor_covid_subject_phishing_email.xml')
foo.xpath('//trans/dblock[@type="ascii"]')
foo
foo = Nokogiri::XML(File.read('hancitor_covid_subject_phishing_email.xml'))
foo.xpath('//trans/dblock[@type="ascii"]')
foo.xpath('//trans[@/dblock[@type="ascii"]').first
foo.xpath('//trans/dblock[@type="ascii"]').second
foo.xpath('//trans/dblock[@type="ascii"]')
foo.xpath('//trans/dblock[@type="ascii"]').last
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]')
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').count
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]')[1]
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]')[2]
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first
foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').strip
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.strip
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.strip("\r\n")
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.tr("\r\n")
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.tr("\r\n","")
puts foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.tr("\r\n","").tr(
)
require 'yaml'
YAML.unescape
require 'syck/encoding'
def unescape(string)
  dup = string.dup
  escaped_chars = ['n', 't', 'r', 'f', 'v', '0', 'a']
  escaped_subs = {
    "n" => "\n",
    "t" => "\t",
    "r" => "\r",
    "f" => "\f",
    "v" => "\v",
    "0" => "\0",
    "a" => "\a"
  }
  pos = 0
  while pos < dup.length
    if dup[pos] == '\\' and escaped_chars.include? dup[pos + 1]
      dup[pos..(pos + 1)] = escaped_subs[dup[pos + 1]]
    end
    pos += 1
  end
  return dup
end
mytext= foo.xpath('//trans[@type="client"]/dblock[@type="ascii"]').first.text.tr("\r\n","")
unescape(mytext)
puts mytext
unescape(mytext)
if nil > -1
puts 'asdf'
end
if nil < -1
puts 'adsf'
end
puts 'aasdf' if nil < -1
puts 'aasdf' if nil &.< -1
value = nil
puts 'aasdf' if value &.< -1
value = -1
puts 'aasdf' if value &.< -1
value = -3
puts 'aasdf' if value &.< -1
@repositories = %w[checkpoint fortiguard paloalto xforce snort microsoft hpe cisco firepower redhat suse]
@repositories
@repositories & ["fortiguard"]
@repositories | ["fortiguard"]
@repositories ^ ["fortiguard"]
@repositories - ['fortiguard']
'asdfasdf,asdfasdf,asdf'.split(',')
'asdfasdf'.split(',')
File.read('asdfasdf')
File.exist?('/tmp/foo')
File.exists?('/tmp/foo')
foo = []
bar = [1,23,4,5,]
foo += bar
foo
foo[1]
foo = File.read('foo.json')
foo
require 'json'
bar = JSON.parse(foo)
bar
bar.merge({"to" => "hello@example.com"})
{foo: 1, bar: 2} & {:foo}
{foo: 1, bar: 2}.slice[:foo]
{foo: 1, bar: 2}
{foo: 1, bar: 2}.slice{:foo}
{foo: 1, bar: 2}.slice(:foo)
{foo: 1, bar: 2}.slice(:foo, :chuck)
{chuck: 'chuck'}.merge({foo: 1, bar: 2}.slice(:foo, :chuck)(
{chuck: 'chuck'}.merge({foo: 1, bar: 2}.slice(:foo, :chuck))
{chuck: 'chuck'}.merge({foo: 1, bar: 2, "chuck" => "fred"}.slice(:foo, :chuck))
{chuck: 'chuck'}.merge({foo: 1, bar: 2, "chuck" => "fred"}.slice(:foo, "chuck"))
{'chuck' => "nope"}.merge({foo: 1, bar: 2, "chuck" => "fred"}.slice(:foo, "chuck"))
{chuck: 1234}.to_json
{'chuck': 1234}
{'chuck' => 1234}
{'chuck' => 1234}.as_json
pairs = [[1,2]]
paris += [[3,4],[5,6]]
pairs += [[3,4],[5,6]]
paris
pairs
pairs += [1,2,3].map { |x| [x,x+100] }
pairs
File.join('attachments', "something else that's weird")
File.join('attachments', "something else that's w\x0aeird")
nil.slice
nil[]
nil[1]
nil&[1]
[1,2,3,4]&[1]
nil&[1].slice
nil&[1].&slice
nil&[1]&.slice
nil&[1]
nil.&[1]
nil.&[1]
%i[http dns]
%I[http dns]
%I[http 
dns]
%i[http 
dns]
%i[http, dns] 
%I[http, dns] 
class Chuck
def foobar
puts @what
end
attr_accessor: what
end
class Chuck
def foobar
puts @what
end
attr_accessor :what
end
hello = Chuck.new()
hello.what = 1
hello.foobar
hello.what = 100
hello.foobar
@config
@config&.[:asf]
@config&.has_key?(:foo)
@config = {}
@config&.has_key?(:foo)
@config = {foo: 123}
@config&.has_key?(:foo)
{}.merge(nil)
@adsfasfd&.has_key?(:adsf)
source 'assessment_list_things.rb'
source 'assessment_list_things.rb'
source 'assessment_list_things.rb'
source 'assessment_list_things.rb'
irb
source 'assessment_list_things.rb'
foo = Thingy.new
foo.get_assessment
source 'assessment_list_things.rb'
foo.get_assessment
bar = foo.get_assessment
bar['assessment_stages']
bar['assessment_stages'].each do |x|
x['audit_lists'].first['audit_list_members'] do |y|
puts y['member_id']
end
end
source 'assessment_list_things.rb'
require 'optparse'
{chuck: true}.merge({chuck: false})
[].empty?
File.join('./config')
File.basename('./config')
File.basename('./config.json')
foo = {}
foo['asdfasdf'] = 123
require json
require json
require 'json'
json_email_config = JSON.parse(File.read('config.json'))
json_email_config = JSON.parse(File.read('config.json'))
json_email_config = JSON.parse(File.read('config.json'))
json_email_config = JSON.parse(File.read('config.json'))['headers']['Subject'] = 'asdfasdf'
source 'parse.rb'
ms_json
source 'parse.rb'
ms_json['affected_products']
ms_json['affectedProducts']
foo = {}
foo['adsfasdf']['adfasdf'] = 123
foo['adsfasdf'] = 123
foo['adsfasdf']['adfasdf'] = 123
foo.default={}
foo['adsfasdfaaaasdfasdf']['adfasdf'] = 123
foo
foo.default_proc={}
foo['adsfasdfaaaasdfasdf']['adfasdf'] = 123
foo.default_proc=Hash.new()
foo['adsfasdfaaaasdfasdf']['adfasdf'] = 123
foo = P{
foo = {}
foo = {}
foo.default_proc = proc do |hash, key|
hash[key] = {}
end
foo['asdf']['cuck']=1
foo
foo = {}
foo.default_proc = proc { |h, k| h[k] = {} }
foo['asdf']['cuck']=1
foo
require_relative 'id_generator
'
require_relative 'id_generator'
IDGenerator.measures
IDGenerator.measures
